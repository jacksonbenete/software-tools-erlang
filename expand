#!/usr/bin/escript

%% init_symbol -- get the firs symbol for count repetitions
%%
%% This is a abstraction instead of using letter 'A' directly.
init_symbol() ->
    Symbol = 64,  % ASCII 64 = @, next one is 'A'
    Symbol.

%% expand -- uncompress standard input
%%
%% We had to put guards ranging from 65 to 122, or else
%% the conversion starts to fail on lists:seq/2 logic.
expand(Input) ->
    Base = init_symbol(),
    expand(Input, Base, []).

expand([], _, Acc) ->
    ststd:putf("~p~n", [Acc]);
expand([126, Count, Char|T], Base, Acc) when Count >= 65 andalso Count =< 122 ->
    Finding = lists:map(fun(_) -> Char end, lists:seq(1, Count - Base)),
    expand(T, Base, lists:concat([Acc, Finding]));
expand([H|T], Base, Acc) ->
    expand(T, Base, lists:concat([Acc, [H]])).

main([]) ->
    Input = ststd:getf(),
    expand(Input);
main(Arg) ->
    {ok, Bin} = file:read_file(Arg),
    File = erlang:binary_to_list(Bin),
    expand(File).
